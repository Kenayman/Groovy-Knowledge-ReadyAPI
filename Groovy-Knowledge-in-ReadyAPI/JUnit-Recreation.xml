<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://eviware.com/soapui/config" id="67c82452-521f-4018-a9c5-bb1dd3e6c501" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="JUnit Recreation" searchProperties="true" timeout="0">
  <con:settings>
    <con:setting id="67c82452-521f-4018-a9c5-bb1dd3e6c501fileName">JUnit-Recreation</con:setting>
  </con:settings>
  <con:testStep type="datasource" name="Resource" id="4d8c5c67-2aa9-4c63-b770-f992d7a840d0">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep">
      <con:dataSource type="Data Generator">
        <con:configuration>
          <generatedDataCount>10</generatedDataCount>
          <generatorsTotalNumber>2</generatorsTotalNumber>
          <lastSelectedProperty>0</lastSelectedProperty>
          <GeneratorType0>CUSTOM</GeneratorType0>
          <PropertyName0>Authorization</PropertyName0>
          <repetitionCountAuthorization>0</repetitionCountAuthorization>
          <repeatValuesAuthorization>false</repeatValuesAuthorization>
          <CustomStringDataGeneratorFormatAuthorization>%SET(test_token,True)</CustomStringDataGeneratorFormatAuthorization>
          <GeneratorType1>CUSTOM</GeneratorType1>
          <PropertyName1>Token</PropertyName1>
          <repetitionCountToken>0</repetitionCountToken>
          <repeatValuesToken>false</repeatValuesToken>
          <CustomStringDataGeneratorFormatToken>%SET(test123,True)</CustomStringDataGeneratorFormatToken>
          <escapeSpaceSequence/>
        </con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>Authorization</con:property>
      <con:property>Token</con:property>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:restartOnRun>true</con:restartOnRun>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="ProcessSchemaForREST" id="852d9e7d-4c7b-4c4f-b859-3f7b2846c364">
    <con:settings/>
    <con:config>
      <script>import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//read the schema
def filePath = context.expand('${projectDir}')
def projectArtifactLocation = filePath + "/Groovy-Knowledge-ReadyAPI/resources/requestSchema.txt"
def fileContent = new File(projectArtifactLocation).text
def json = new JsonSlurper().parseText(fileContent)
def requestBody = JsonOutput.prettyPrint(JsonOutput.toJson(json))
def requestStep = testRunner.testCase.getTestStepByName("REST Request")

requestStep.getHttpRequest().setRequestContent(requestBody)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script" id="cae68b32-e9bf-4351-9137-5f1fe5b27d94">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep
import com.eviware.soapui.support.types.StringToStringMap
import groovy.json.JsonSlurper
import com.eviware.soapui.model.testsuite.TestStep
import com.eviware.soapui.model.testsuite.TestCase

// =========================
// Preconditions &amp; Postconditions
// =========================

// Precondition method: executed before tests
def setUp() {
    log.info("Setting up the test environment (precondition).")
    // Initialize variables, open connections, etc.
}

// Postcondition method: executed after tests
def tearDown() {
    log.info("Cleaning up the test environment (postcondition).")
    // Close connections, clear temporary data, etc.
}

// =========================
// Step 1: Extract the Project Name (Folder Name)
// =========================
def extractProjectName() {
    def projectName = context.testCase.testSuite.project.name
    log.info("Project Name: " + projectName)
}

// =========================
// Step 2: Set and Get a TestCase Property
// =========================
def setAndGetTestCaseProperty() {
    // Get token from data source "Resource"
    def tokenValue = context.expand('${Resource#token}')
    // Set token as a property on the TestCase
    context.testCase.setPropertyValue("Token", tokenValue)
    // Retrieve the token property value
    def token = context.testCase.getPropertyValue("Token")
    log.info("TestCase property 'Token' is set to: " + token)
}

// =========================
// Step 3: Modify a Request Header Before Sending a Request
// =========================
def modifyRequestHeader() {
    // Get the authorization value from the data source "Resource"
    def authorizationValue = context.expand('${Resource#Authorization}')
    def request = testRunner.testCase.getTestStepByName("REST Request")
    if (request == null) {
        log.error("Test Step 'REST Request' does not exist.")
        assert false : "Test step 'REST Request' not found."
    } else {
        // Retrieve current headers and add the Authorization header
        def headers = request.getHttpRequest().getRequestHeaders()
        headers["Authorization"] = ["Bearer " + authorizationValue]
        request.getHttpRequest().setRequestHeaders(headers)
        log.info("Authorization header set successfully.")
        
        // Assertion: verify that the header is set correctly
        def headerValue = request.getHttpRequest().getRequestHeaders()["Authorization"]?.first()
        assert headerValue == "Bearer " + authorizationValue : "Header not set correctly."
    }
}

// =========================
// Step 4: Parse a JSON Response and Log Data
// =========================
def parseJsonResponse() {
    def requestStep = testRunner.testCase.getTestStepByName("REST Request")
    // Assume the response content is available in the request's content (adjust as needed)
    def requestBody = requestStep.testRequest.requestContent
    def json = new JsonSlurper().parseText(requestBody)
    def extractedToken = json.user.token
    log.info("Extracted Token from JSON: " + extractedToken)
    // Assertion: check that the extracted token is not null
    assert extractedToken != null : "Extracted token is null."
}

// =========================
// Step 5: Execute Another Test Step Using Groovy
// =========================
def executeAnotherTestStep() {
    def testStep = testRunner.testCase.getTestStepByName("REST Request") as TestStep
    testStep.run(testRunner, context)
    log.info("Test step executed successfully.")
}

// =========================
// Step 6: Validate a TestCase Property Using assert
// =========================
def validateTestCaseProperty() {
    def status = testRunner.testCase.getTestStepByName("REST Request")
                    .testRequest.response.responseHeaders["#status#"]?.first()
    assert status?.startsWith("200") : "Status check failed. Expected a status starting with '200', but found: " + status
}

// =========================
// Main Execution Flow (Simulating a Test Suite)
// =========================
try {
    // Execute precondition
    setUp()
    
    // Get values from the data source "Resource"
    def authorizationValue = context.expand('${Resource#Authorization}')
    def tokenValue = context.expand('${Resource#token}')
    log.info("Data Source Values - Authorization: " + authorizationValue + ", Token: " + tokenValue)
    
    // Execute the six test steps
    extractProjectName()            // Step 1
    setAndGetTestCaseProperty()     // Step 2
    modifyRequestHeader()           // Step 3
    parseJsonResponse()             // Step 4
    executeAnotherTestStep()        // Step 5
    validateTestCaseProperty()      // Step 6
    
    log.info("All 6 steps executed successfully.")
} catch(Exception e) {
    log.error("Test execution failed: " + e.getMessage())
    throw e
} finally {
    // Execute postcondition
    tearDown()
}
</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="REST Request" id="b46b48c9-2103-47dc-b500-c2ea5976d678">
    <con:settings/>
    <con:config service="Test" resourcePath="/apis" methodName="Method 1" xsi:type="con:RestRequestStep">
      <con:restRequest name="REST Request" id="01d01488-9639-4014-83f7-54020a544925" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment>&lt;con:entry key="Authorization" value="Bearer test_token" xmlns:con="http://eviware.com/soapui/config"/>&lt;con:entry key="A" value="Bearer authorizationValue" xmlns:con="http://eviware.com/soapui/config"/>&lt;con:entry key="Authoraization" value="Bearer test_token" xmlns:con="http://eviware.com/soapui/config"/>&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://api.swaggerhub.com</con:endpoint>
        <con:request>{
    "user": {
        "id": 1,
        "token": "abcdef123456"
    }
}</con:request>
        <con:originalUri>https://api.swaggerhub.com/apis</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="25a4eb72-6f3b-4f38-aa84-e87d82e052c7" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>405</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Response SLA Assertion" id="b801bbdf-df29-46ed-8f47-14c1eb153576" name="Response SLA">
          <con:configuration>
            <SLA>2000</SLA>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:parameterOrder>
          <con:entry>Authorization</con:entry>
        </con:parameterOrder>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>Token</con:name>
      <con:value>test123</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
